Source: card-proxy
Section: misc
Priority: extra
Maintainer: Viacheslav Naydenov <vnaydionov@gmail.com>
Build-Depends: 
 debhelper,
 dh-buildinfo,
 cdbs (>= 0.4.69~),
 devscripts, cmake, g++ (>= 4.4), libcurl-dev, libjson-c-dev, libyborm-dev (>= 0.4.7-fix7)
Standards-Version: 3.7.3
Homepage: https://github.com/vnaydionov/card-proxy

Package: card-proxy-service
Architecture: all
Depends: ${shlibs:Depends}, ${misc:Depends}, python2.7, python-support
Description: Service scripts for pinger/restarter/init scripts

Package: card-proxy-tokenizer
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, card-proxy-service
Description: This is a HTTP proxy-server that stores the payment card data
 sent by a user from a WEB-form or a mobile application in a secure card vault.
 On receival of the card data the proxy passes to the upstream only an opaque
 card token parameter.  And vice versa: when addressing the payment gate
 the card token is automatically unwrapped to a full record.
 The proxy code is implemented in C++.

Package: card-proxy-keykeeper2
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, card-proxy-service
Description: This is a simple HTTP server that keeps a portion of a key in memory,
 automatically sharing the information between the specified peers.

Package: card-proxy-confpatch
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, card-proxy-service
Description: This is a simple HTTP server that helps to maintain XML configs,
 allowing to change the portions of confuguration files used by servants.

Package: card-proxy-keyapi
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, card-proxy-service
Description: The key management server implements a HTTP API.
 Most methods are authenticated by passing an existing part of KEK of some version.

Package: card-proxy-secvault
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, card-proxy-service
Description: This is an HTTP server implementing API for tokenization of secrets.
 Secrets are tokenized and stored encrypted in database, each secret can be
 retrieved later using its token.  Secrets also have expiration timestamp
 to notify about update needed.

